import groovy.json.JsonSlurper
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.7.410" apply false
    id "de.undercouch.download" version "4.1.2"
    id "com.github.johnrengelman.shadow" version "7.1.0"
    id "base"
}

def default_minecraft_version = "1.20.4"
def minecraft_version = rootProject.properties.containsKey("buildVersion") ? rootProject.getProperties().get("buildVersion") : default_minecraft_version
def minecraft_main_version = minecraft_version.split("\\.")[1] as int
def minecraft_version_int = minecraft_version.split("\\.")[0] +
        minecraft_version.split("\\.")[1].padLeft(2, '0') +
        (minecraft_version.split("\\.").length > 2 ? minecraft_version.split("\\.")[2].padLeft(2, '0') : "00")
def is_1_19_3 = (minecraft_version == "1.19.3")
def is_1_19_4 = (minecraft_version == "1.19.4")
def parchment_version = is_1_19_3 ? "N/A" : new XmlSlurper().parse("https://ldtteam.jfrog.io/artifactory/parchmentmc-internal/org/parchmentmc/data/parchment-${minecraft_version}/maven-metadata.xml").versioning.release

rootProject.ext.mc_version = minecraft_version
rootProject.ext.fabric_loader_version = new JsonSlurper().parse(("https://meta.fabricmc.net/v2/versions/loader/" + minecraft_version).toURL())[0]["loader"]["version"]
rootProject.ext.forge_version = minecraft_version + "-" + new JsonSlurper().parse(("https://files.minecraftforge.net/net/minecraftforge/forge/promotions_slim.json").toURL())["promos"][minecraft_version + "-latest"]
rootProject.ext.neo_forge_version = [
        "1.21.1": "21.1.31",
        "1.21": "21.0.167",
        "1.20.4": "20.4.237",
        "1.20.2": "20.2.88"
][minecraft_version]
rootProject.ext.fabric_api_version = getModrinthVersion("fabric", minecraft_version, "fabric-api")
rootProject.ext.mod_menu_version = getModrinthVersion("fabric", minecraft_version, "modmenu")
rootProject.ext.architectury_version = getModrinthVersion("forge", minecraft_version, "architectury-api").split("\\+")[0]
rootProject.ext.architectury_id = minecraft_main_version == 16 ? "me.shedaniel" : "dev.architectury"
rootProject.ext.cloth_config_version = getModrinthVersion("fabric", minecraft_version, "cloth-config").toString().replaceAll("\\+fabric", "")

architectury {
    minecraft = minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
		implementation files("../library/mtr-common.jar")
        implementation "org.codehaus.groovy:groovy-json:3.0.9"
        annotationProcessor 'systems.manifold:manifold-preprocessor:2023.1.10'
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings is_1_19_3 ? loom.officialMojangMappings() : loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
        }
        implementation 'org.mozilla:rhino:1.7.14'
    }
}

task setupLibrary() {
    doLast {
        download {
            src "https://www.minecrafttransitrailway.com/libs/${rootProject.mtr_version}/MTR-common-${minecraft_version}-${rootProject.mtr_version}-dev.jar"
            dest "./library/mtr-common.jar"
            overwrite true
        }

        download {
            src "https://www.minecrafttransitrailway.com/libs/${rootProject.mtr_version}/MTR-fabric-${minecraft_version}-${rootProject.mtr_version}-dev-shadow.jar"
            dest "./library/mtr-fabric.jar"
            overwrite true
        }

        download {
            src "https://www.minecrafttransitrailway.com/libs/${rootProject.mtr_version}/MTR-forge-${minecraft_version}-${rootProject.mtr_version}-dev-shadow.jar"
            dest "./library/mtr-forge.jar"
            overwrite true
        }
    }
}

tasks.register('setupFiles') {
//    try {
//        download {
//            src "https://github.com/jonafanho/Minecraft-Mappings/archive/refs/heads/1.${minecraft_main_version}${is_1_19_3 ? ".3" : ""}${is_1_19_4 ? ".4" : ""}.zip"
//            dest "common/src/main/java/msnj/tcwm/mappings/files.zip"
//            overwrite true
//        }
//    }
//    catch (Exception e) {
//        e.printStackTrace();
//        println "Github又双叕挂力"
//    }

//    copy {
//        outputs.upToDateWhen { false }
//        from(zipTree("common/src/main/java/msnj/tcwm/mappings/files.zip")) { eachFile { file -> file.relativePath = new RelativePath(true, file.relativePath.segments.drop(1) as String[]) } }
//        into "common/src/main/java/msnj/tcwm/mappings"
//        filter(ReplaceTokens, tokens: ["package": "msnj.tcwm.mappings; import mtr.mappings.*"])
//    }
//
//    fileTree("common/src/main/java/msnj/tcwm/mappings").matching {
//        include 'Fabric*.java'
//    }.each { file ->
//        copy {
//            from file
//            into "fabric/src/main/java/msnj/tcwm/fabric/mappings"
//            filter { String line ->
//                return line.replace("msnj.tcwm.mappings", "msnj.tcwm.fabric.mappings")
//            }
//        }
//    }
//
//    fileTree("common/src/main/java/msnj/tcwm/mappings").matching {
//        include 'Forge*.java'
//    }.each { file ->
//        copy {
//            from file
//            into "forge/src/main/java/msnj/tcwm/forge/mappings"
//            filter { String line ->
//                return line.replace("msnj.tcwm.mappings", "msnj.tcwm.forge.mappings")
//            }
//        }
//    }
//
//    ant.delete(dir: "common/src/main/java/msnj/tcwm/mappings", includes: "Forge*.java");
//    ant.delete(dir: "common/src/main/java/msnj/tcwm/mappings", includes: "Fabric*.java");

//    copy {
//        outputs.upToDateWhen { false }
//        from "D:/Dex/mtr-fabric.jar"
//        into "fabric/run/mods"
//    }
//
//    copy {
//        outputs.upToDateWhen { false }
//        from "D:/Dex/mtr-forge.jar"
//        into "forge/run/mods"
//    }
}

allprojects {
    apply plugin: "architectury-plugin"

    version = minecraft_version + "-" + project.mod_version
    group = project.maven_group

    repositories {
        maven { url = "https://jitpack.io/" }
        maven { url = "https://maven.terraformersmc.com/" }
        maven { url = "https://maven.parchmentmc.org/" }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"

        if (minecraft_main_version == 16) {
            def targetVersion = 8
            if (JavaVersion.current().isJava9Compatible()) {
                options.release.set(targetVersion)
            }
        } else if (minecraft_main_version == 17) {
            options.release.set(16)
        } else {
            options.release.set(17)
        }

        options.compilerArgs += ['-Xplugin:Manifold', '-AMC_VERSION=' + minecraft_version_int]
    }

    afterEvaluate {
//        for (def task in it.tasks) {
//            if (task != rootProject.tasks.setupFiles) {
//                task.dependsOn rootProject.tasks.setupFiles
//            }
//        }
        ///rootProject.tasks.build.dependsOn rootProject.tasks.setupLibrary

    }
}

static def getModrinthVersion(loader, minecraftVersion, projectId) {
    def versionsArray = new JsonSlurper().parse(("https://api.modrinth.com/v2/project/" + projectId + "/version").toURL())
    for (def versionElement : versionsArray) {
        if (versionElement["loaders"].contains(loader) && versionElement["game_versions"].contains(minecraftVersion)) {
            return versionElement["version_number"]
        }
    }
    return ""
}

static def getParchmentVersion(minecraftVersion) {
    def url = "https://ldtteam.jfrog.io/artifactory/parchmentmc-internal/org/parchmentmc/data/parchment-" + minecraftVersion + "/maven-metadata.xml"
    def data = new XmlParser().parse(url)
    return data.versioning.latest.text()
}
