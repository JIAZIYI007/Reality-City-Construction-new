plugins {
	id "com.github.johnrengelman.shadow"
}

architectury {
	platformSetupLoomIde()
	fabric()
}

repositories {
	mavenCentral()
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven { url "https://maven.nucleoid.xyz/" }
}

loom {
	mixin {
		defaultRefmapName = "mixins.tcwm.refmap.json"
	}
}

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

dependencies {
	modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
	modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

	modApi "com.terraformersmc:modmenu:${rootProject.ext.mod_menu_version}"
	modApi "me.shedaniel.cloth:cloth-config-fabric:${rootProject.ext.cloth_config_version}"

	modApi "${rootProject.ext.architectury_id}:architectury-fabric:${rootProject.ext.architectury_version}"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

shadowJar {
	exclude "*.bmp"

	configurations = [project.configurations.shadowCommon]
	//classifier "dev-shadow"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	//classifier null
}

task copyToMods(type: Copy) {
  from 'build/libs'
  into 'C:\\Users\\zu2ht\\Documents\\1165\\mods'
  into 'D:\\Fsrsix\\Vestiom\\.minecraft\\versions\\1.16.5-Fabric 0.14.21\\mods'
  include '*.jar'
  exclude '*-dev-shadow.jar'
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

task moveFabricBuilds() {
	doLast {
		delete fileTree("../build").matching {
			include "**/RCC-fabric*"
		}
		copy {
			from "build/libs"
			into "../build"
			exclude "*dev-shadow.jar"
			rename "(.+)", "RCC1-\$1"
		}
	}
}

afterEvaluate {
//	for (def task in it.tasks) {
//		if (task == tasks.build) {
//			task.finalizedBy tasks.moveFabricBuilds
//		}
//	}
}
